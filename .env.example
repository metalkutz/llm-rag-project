# Environment Configuration for RAG Microservice
# Copy this file to .env and modify as needed

# API Configuration
API_HOST=0.0.0.0
API_PORT=8000
API_RELOAD=true
API_WORKERS=1

# Embedding Model Configuration
EMBEDDING_MODEL_NAME=all-MiniLM-L6-v2
EMBEDDING_DEVICE=cpu
EMBEDDING_BATCH_SIZE=32

# Language Model Configuration
LLM_MODEL_NAME=microsoft/DialoGPT-medium
LLM_MAX_NEW_TOKENS=256
LLM_TEMPERATURE=0.7
LLM_TOP_P=0.9
LLM_DEVICE=cpu

# Vector Store Configuration
VECTOR_STORE_TYPE=chromadb
VECTOR_STORE_PERSIST_DIRECTORY=data/chromadb
VECTOR_STORE_COLLECTION_NAME=rag_documents

# Document Processing Configuration
DOCUMENT_PROCESSING_CHUNK_SIZE=512
DOCUMENT_PROCESSING_CHUNK_OVERLAP=50
DOCUMENT_PROCESSING_MAX_DOCUMENTS=1000

# Retrieval Configuration
RETRIEVAL_TOP_K=3
RETRIEVAL_SIMILARITY_THRESHOLD=0.5

# Streamlit UI Configuration
STREAMLIT_HOST=0.0.0.0
STREAMLIT_PORT=8501
STREAMLIT_API_URL=http://localhost:8000

# Logging Configuration
LOGGING_LEVEL=INFO
LOGGING_FORMAT={time:YYYY-MM-DD HH:mm:ss} | {level} | {name}:{function}:{line} | {message}
# LOGGING_FILE=logs/rag-microservice.log

# Environment Configuration
ENVIRONMENT=development
DEBUG=true

# Optional: Hugging Face Token (for private models)
# HUGGINGFACE_TOKEN=your_hf_token_here

# Optional: OpenAI API Key (if using OpenAI models)
# OPENAI_API_KEY=your_openai_key_here

# Optional: Production Database (if not using ChromaDB)
# DATABASE_URL=postgresql://user:password@localhost:5432/rag_db

# Optional: Redis Cache (for production caching)
# REDIS_URL=redis://localhost:6379

# Optional: Authentication (for production)
# API_KEY=your_api_key_here
# JWT_SECRET_KEY=your_jwt_secret_here

# Optional: Monitoring and Observability
# SENTRY_DSN=your_sentry_dsn_here
# PROMETHEUS_ENABLED=true
# JAEGER_AGENT_HOST=localhost
# JAEGER_AGENT_PORT=6831

# Docker-specific configurations
# Use these when running in Docker containers
# VECTOR_STORE_PERSIST_DIRECTORY=/app/data/chromadb
# STREAMLIT_API_URL=http://rag-api:8000
