services:
  # RAG API Service
  rag-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: rag-microservice-api
    ports:
      - "8000:8000"
    secrets:
      - huggingface_token
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
      - chromadb-data:/app/data/chromadb
    environment:
      - PYTHONPATH=/app
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - VECTOR_STORE_PERSIST_DIRECTORY=/app/data/chromadb
    command: ["uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - rag-network
    restart: unless-stopped

  # Streamlit UI Service
  rag-ui:
    build:
      context: ..
      dockerfile: docker/Dockerfile.ui.prod
    container_name: rag-microservice-ui
    ports:
      - "8501:8501"
    environment:
      - PYTHONPATH=/app
      - API_URL=http://rag-api:8000
    command: ["streamlit", "run", "streamlit/app.py", "--server.address", "0.0.0.0", "--server.port", "8501", "--server.headless", "true"]
    depends_on:
      rag-api:
        condition: service_healthy
    networks:
      - rag-network
    restart: unless-stopped

  # ChromaDB Service
  chromadb:
    image: chromadb/chroma:latest
    container_name: rag-chromadb
    ports:
      - "8001:8000"
    volumes:
      - chromadb-data:/chroma/chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_PORT=8000
      - HEALTH_TIMEOUT=30
      - QUERY_TIMEOUT=300
    networks:
      - rag-network
    restart: unless-stopped

networks:
  rag-network:
    driver: bridge

volumes:
  chromadb-data:
    driver: local

secrets:
  huggingface_token:
    external: true
